#include <stdio.h>
#include <stdlib.h>
#include <errno.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <netinet/if_ether.h>
#include <time.h>
#include <pcap.h>

#include <string>
#include <iostream>
#include <algorithm>
#include <boost/crc.hpp>

#include "csvtable.h"

using namespace std;

struct Capture {

    pcap_t* pcap;
    string device;


    Capture(string dev) {

        char errbuf[PCAP_ERRBUF_SIZE];

#define SNAPLEN 256

        device = dev;
        pcap = pcap_open_live(device.c_str(), SNAPLEN, 0, 100000, errbuf);

        if (pcap == NULL) {

            printf("pcap_open_live(): %s\n", errbuf);
            throw std::exception();
        }

        bpf_program fp;
        pcap_compile( pcap, &fp, "icmp[icmptype] == icmp-echo", 0,
                      PCAP_NETMASK_UNKNOWN);

        pcap_setfilter(pcap, &fp);

    }


    ~Capture() {

        pcap_close(pcap);
    }


    string fetch() {

        struct pcap_pkthdr hdr;
        const uint8_t* packet = NULL;

        while (packet == NULL) {

            packet = pcap_next(pcap, &hdr);

            if(packet == NULL) {

                printf("Didn't grab packet\n");
            }

        }

        string r;

        //r.assign(hdr.len, 'a');
        //copy_n(packet, hdr.len, r.begin());

        r.assign(16, 'a');
        copy_n(packet+58, 16, r.begin());

        return r;
    }

};


bool check_data(string s) {

    uint16_t r = crc16(s.substr(2));
    uint16_t x = byte2uint16(s.substr(0,2));

    return (x == ntohs(r));
}


int parse_header(string s) {

    if ( !check_data(s) ) return -1;

    vector<string> v;
    boost::split(v, s, boost::is_any_of("="));

    return std::stoi(v[1]);
}


int parse_data(string s, string& result) {

    if ( !check_data(s) ) return -1;

    result += s.substr(4);
    uint16_t r = byte2uint16(s.substr(2,2));
    return r;
}


int main(int argc, char* argv[]) {

    const char* dev;
    if (argc == 2) {

        dev = argv[1];

    } else {

        dev = "wlan0";
    }

    Capture cap(dev);

    int flag = 0;
    int size = 0;
    string result;

    int proc_size = 0;

    while (1) {

        string packet = cap.fetch();

        if (flag == 0) {

            size = parse_header(packet);

            if (size > 0) flag = 1;

        } else if (flag == 1) {

            parse_data(packet, result);

            if (result.size() > size) break;
        }
    }

    file_put_contents("tmp.txt", result);

    return 0;
}




