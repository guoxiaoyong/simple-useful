(define (f x) (+ x 1))
(define (to_int n) (n f 0))
(define (to_boolean b) (b #t #f))

(define (true x y) x)
(define (false x y) y)
(define (logical_and x y) (x y false))
(define (logical_or x y) (x true y))
(define (logical_not x) (x false true))
(define (pair a b) (lambda (z) (z a b)))
(define (is_zero n) (n (lambda (k) false) true))

(define (if_then_else condition_expr true_clause false_clause) (condition_expr true_clause false_clause))
(define (succ n) (lambda (f x) (f (n f x))))
(define (add m n) (m succ n))
(define n0 false)
(define n1 (succ n0))
(define n2 (succ n1))
(define n3 (succ n2))
(define n4 (succ n3))
(define n5 (succ n4))
(define n6 (succ n5))
(define n7 (succ n6))
(define n8 (succ n7))
(define n9 (succ n8))
(define (phi p) (pair (succ (p true)) (p true)))
(define (pred n) ((n phi (pair n0 n0)) false))
(define (Y y) (((lambda (x) (y (x x))) (lambda (x) (y (x x))))))
(define (sum r n) ((is_zero n) n0 (n succ (r (pred n)))))

(display (to_int n0))
(display (to_int (pred n9)))
(display (to_int (add n9 n8)))
(display ((pair "first" "second") true))
(display ((pair "first" "second") false))
(display (to_boolean (is_zero n0)))
(display (to_boolean (is_zero n1)))
(display (sum (Y sum) n5))
